// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type debug_virtiofsFileOper struct {
	Oper     [32]uint8
	OperExit bool
	Comm     [16]uint8
	Filepath [32]uint8
	_        [7]byte
	Ktime    uint64
}

// loadDebug_virtiofs returns the embedded CollectionSpec for debug_virtiofs.
func loadDebug_virtiofs() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Debug_virtiofsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load debug_virtiofs: %w", err)
	}

	return spec, err
}

// loadDebug_virtiofsObjects loads debug_virtiofs and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*debug_virtiofsObjects
//	*debug_virtiofsPrograms
//	*debug_virtiofsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDebug_virtiofsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDebug_virtiofs()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// debug_virtiofsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debug_virtiofsSpecs struct {
	debug_virtiofsProgramSpecs
	debug_virtiofsMapSpecs
}

// debug_virtiofsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debug_virtiofsProgramSpecs struct {
	TraceDoSysOpenat2  *ebpf.ProgramSpec `ebpf:"trace_do_sys_openat2"`
	TraceExecve        *ebpf.ProgramSpec `ebpf:"trace_execve"`
	TraceFuseFileWrite *ebpf.ProgramSpec `ebpf:"trace_fuse_file_write"`
	TraceFuseFlush     *ebpf.ProgramSpec `ebpf:"trace_fuse_flush"`
	TraceFuseFsync     *ebpf.ProgramSpec `ebpf:"trace_fuse_fsync"`
	TraceFuseOpen      *ebpf.ProgramSpec `ebpf:"trace_fuse_open"`
	TraceVfsOpen       *ebpf.ProgramSpec `ebpf:"trace_vfs_open"`
}

// debug_virtiofsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type debug_virtiofsMapSpecs struct {
	FileOpers *ebpf.MapSpec `ebpf:"file_opers"`
	Traced    *ebpf.MapSpec `ebpf:"traced"`
}

// debug_virtiofsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDebug_virtiofsObjects or ebpf.CollectionSpec.LoadAndAssign.
type debug_virtiofsObjects struct {
	debug_virtiofsPrograms
	debug_virtiofsMaps
}

func (o *debug_virtiofsObjects) Close() error {
	return _Debug_virtiofsClose(
		&o.debug_virtiofsPrograms,
		&o.debug_virtiofsMaps,
	)
}

// debug_virtiofsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDebug_virtiofsObjects or ebpf.CollectionSpec.LoadAndAssign.
type debug_virtiofsMaps struct {
	FileOpers *ebpf.Map `ebpf:"file_opers"`
	Traced    *ebpf.Map `ebpf:"traced"`
}

func (m *debug_virtiofsMaps) Close() error {
	return _Debug_virtiofsClose(
		m.FileOpers,
		m.Traced,
	)
}

// debug_virtiofsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDebug_virtiofsObjects or ebpf.CollectionSpec.LoadAndAssign.
type debug_virtiofsPrograms struct {
	TraceDoSysOpenat2  *ebpf.Program `ebpf:"trace_do_sys_openat2"`
	TraceExecve        *ebpf.Program `ebpf:"trace_execve"`
	TraceFuseFileWrite *ebpf.Program `ebpf:"trace_fuse_file_write"`
	TraceFuseFlush     *ebpf.Program `ebpf:"trace_fuse_flush"`
	TraceFuseFsync     *ebpf.Program `ebpf:"trace_fuse_fsync"`
	TraceFuseOpen      *ebpf.Program `ebpf:"trace_fuse_open"`
	TraceVfsOpen       *ebpf.Program `ebpf:"trace_vfs_open"`
}

func (p *debug_virtiofsPrograms) Close() error {
	return _Debug_virtiofsClose(
		p.TraceDoSysOpenat2,
		p.TraceExecve,
		p.TraceFuseFileWrite,
		p.TraceFuseFlush,
		p.TraceFuseFsync,
		p.TraceFuseOpen,
		p.TraceVfsOpen,
	)
}

func _Debug_virtiofsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed debug_virtiofs_bpfel_x86.o
var _Debug_virtiofsBytes []byte
